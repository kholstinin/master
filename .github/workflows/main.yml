on:
  push:
    branches:
    - master
  pull_request:
    branches:
    - master

env:
  S3_ENDPOINT: 'https://storage.yandexcloud.net'
  S3_PATH: 'v1/static'
  CR_REGISTRY: crp4ha0gophhmdbcg4ss
  IMAGE_TAG: ${{ github.sha }}

jobs:
  dependencies:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
          cache: 'yarn'
      - name: install
        run: yarn

  linters:
    runs-on: ubuntu-latest
    needs: [dependencies]
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
          cache: 'yarn'
      - name: install
        run: yarn
      - name: eslint
        run: yarn eslint
      - name: stylelint
        run: yarn stylelint
      - name: prettier
        run: yarn prettier

  unit:
    runs-on: ubuntu-latest
    needs: [dependencies]
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
          cache: 'yarn'
      - name: install
        run: yarn
      - name: jest
        run: yarn jest

  integration:
    runs-on: ubuntu-latest
    needs: [dependencies]
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
          cache: 'yarn'
      - name: install
        run: yarn
      - name: Install Playwright Browsers
        run: npx playwright install --with-deps
      - name: playwright
        run: yarn playwright
      - uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  build:
    runs-on: ubuntu-latest
    needs: [dependencies]
    env:
      API_URL: https://kholstinevich.ru
      NODE_ENV: production
      PUBLIC_PATH: https://storage.yandexcloud.net/kholstinevich-static/v1/static/
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
          cache: 'yarn'
      - name: install
        run: yarn
      - name: build
        run: yarn build
      - uses: actions/upload-artifact@v4
        with:
          name: build
          path: packages/client/dist
          
  upload:
    runs-on: ubuntu-latest
    needs: build
    environment: production
    steps:
      - name: Download build
        uses: actions/download-artifact@v4
        with:
          name: build
      - uses: jakejarvis/s3-sync-action@master
        with:
          args: --exclude '*.html'
        env:
          AWS_S3_BUCKET: ${{ secrets.AWS_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_S3_ENDPOINT: ${{ env.S3_ENDPOINT }}
          DEST_DIR: ${{ env.S3_PATH }}
          AWS_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      - uses: jakejarvis/s3-sync-action@master
        with:
          args: --exclude '*' --include '*.html'
        env:
          AWS_S3_BUCKET: ${{ secrets.AWS_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_S3_ENDPOINT: ${{ env.S3_ENDPOINT }}
          DEST_DIR: '${{ env.S3_PATH }}/${GITHUB_SHA::8}'
          AWS_REGION: ${{ secrets.AWS_DEFAULT_REGION }}

  docker:
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v4
      - name: Login to Yandex Cloud
        run: |
          echo ${{secrets.DOCKER_OAUTH_TOKEN}}|docker login \
          --username oauth \
          --password-stdin \
          cr.yandex
      - name: Build backend
        run: docker build -t cr.yandex/$CR_REGISTRY/backend:$IMAGE_TAG -f Dockerfile.backend .
      - name: Publish backend
        run: docker push cr.yandex/$CR_REGISTRY/backend:$IMAGE_TAG
      - name: Build nginx
        run: docker build -t cr.yandex/$CR_REGISTRY/nginx:$IMAGE_TAG -f Dockerfile.nginx .
      - name: Publish nginx
        run: docker push cr.yandex/$CR_REGISTRY/nginx:$IMAGE_TAG

  deploy:
    runs-on: ubuntu-latest
    environment: production
    needs: [upload, docker]
    steps:
      - uses: actions/checkout@v4
      - name: generate .env
        run: |
          echo "CR_REGISTRY=${CR_REGISTRY}" > .env
          echo "IMAGE_TAG=${IMAGE_TAG}" >> .env
          echo "HTML_PATH=${S3_ENDPOINT}/${{secrets.AWS_BUCKET}}/${S3_PATH}/${GITHUB_SHA::8}/index.html" >> .env
      - name: Deploy to Staging server
        uses: easingthemes/ssh-deploy@main
        with:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          ARGS: "-rlgoDzvc -i"
          SOURCE: "docker-compose.yml .env"
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
          REMOTE_USER: ${{ secrets.REMOTE_USER }}
          TARGET: ${{ secrets.REMOTE_TARGET }}
          SCRIPT_BEFORE: |
            echo ${{secrets.DOCKER_OAUTH_TOKEN}}|docker login \
            --username oauth \
            --password-stdin \
            cr.yandex
          SCRIPT_AFTER: |
            cd /tmp/deploy
            sudo docker compose up -d
